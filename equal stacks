import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'equalStacks' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY h1
     *  2. INTEGER_ARRAY h2
     *  3. INTEGER_ARRAY h3
     */
//LOGIC STARTS HERE
    public static int equalStacks(List<Integer> h1, List<Integer> h2, List<Integer> h3) {
    // Write your code here
    Stack <Integer> s1=new Stack<>();
    Stack <Integer> s2=new Stack<>();
    Stack <Integer> s3=new Stack<>();
    int h11=0,h22=0,h33=0;
    for(int i=h1.size()-1;i>=0;i--){
        h11+=h1.get(i);
        s1.push(h11);
    }
    for(int i=h2.size()-1;i>=0;i--){
        h22+=h2.get(i);
        s2.push(h22);
    }for(int i=h3.size()-1;i>=0;i--){
        h33+=h3.get(i);
        s3.push(h33);
    }
   while(!s1.isEmpty() && !s2.isEmpty() && !s3.isEmpty()){
    int t1=s1.peek(),t2=s2.peek(),t3=s3.peek();
    if(t1== t2 && t1==t3){
     return t1;
    }
    else if(t1>=t2 && t1>=t3){
        s1.pop();
    }
    else if(t2>=t1 && t2>=t3){
        s2.pop();
    }
    else {
        s3.pop();
    }
   }
   return 0;
    }

}
//LOGIC ENDS HERE

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n1 = Integer.parseInt(firstMultipleInput[0]);

        int n2 = Integer.parseInt(firstMultipleInput[1]);

        int n3 = Integer.parseInt(firstMultipleInput[2]);

        List<Integer> h1 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> h2 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> h3 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.equalStacks(h1, h2, h3);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
